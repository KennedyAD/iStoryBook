/*
Storybook: Open Source software for novelists and authors.
Copyright (C) 2008 - 2012 Martin Mustun

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package storybook.model.hbn.entity;

// TODO: Auto-generated Javadoc
/**
 * Part generated by hbm2java.
 *
 * @hibernate.class table="CATEGORY"
 */
public class Category extends AbstractEntity implements Comparable<Category> {

	/** The Constant serialVersionUID. */
	private static final long serialVersionUID = -493684703527113307L;
	
	/** The sort. */
	private Integer sort;
	
	/** The name. */
	private String name;
	
	/** The sup. */
	private Category sup;

	/**
	 * Instantiates a new category.
	 */
	public Category() {
	}

	/**
	 * Instantiates a new category.
	 *
	 * @param sort the sort
	 * @param name the name
	 * @param sup the sup
	 */
	public Category(Integer sort, String name, Category sup) {
		this.sort = sort;
		this.name = name;
		this.sup = sup;
	}

	/* (non-Javadoc)
	 * @see java.lang.Comparable#compareTo(java.lang.Object)
	 */
	@Override
	public int compareTo(Category ca) {
		if (hasSup() && (ca.hasSup()) && (!(getSup().equals(ca.getSup())))) {
			return getSup().compareTo(ca.getSup());
		}
		return sort.compareTo(ca.sort);
	}

	/* (non-Javadoc)
	 * @see storybook.model.hbn.entity.AbstractEntity#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (!super.equals(obj)) {
			return false;
		}
		Category test = (Category) obj;
		boolean ret = true;
		ret = ret && equalsIntegerNullValue(sort, test.getSort());
		ret = ret && equalsStringNullValue(name, test.getName());
		return ret;
	}

	/**
	 * Gets the id.
	 *
	 * @return the id
	 * @hibernate.id column="ID" generator-class="increment"
	 *               unsaved-value="null"
	 */
	@Override
	public Long getId() {
		return this.id;
	}

	/**
	 * Gets the name.
	 *
	 * @return the name
	 * @hibernate.property 
	 */
	public String getName() {
		return this.name;
	}

	/**
	 * Gets the sort.
	 *
	 * @return the sort
	 * @hibernate.property 
	 */
	public Integer getSort() {
		return this.sort;
	}

	/**
	 * Gets the sup.
	 *
	 * @return the sup
	 * @hibernate.property 
	 */
	public Category getSup() {
		return this.sup;
	}

	/* (non-Javadoc)
	 * @see storybook.model.hbn.entity.AbstractEntity#hashCode()
	 */
	@Override
	public int hashCode() {
		int hash = super.hashCode();
		hash = hash * 31 + sort.hashCode();
		hash = hash * 31 + name.hashCode();
		return hash;
	}

	/**
	 * Checks for sup.
	 *
	 * @return true, if successful
	 */
	public boolean hasSup() {
		return sup != null;
	}

	/**
	 * Sets the id.
	 *
	 * @param id the new id
	 */
	public void setId(Long id) {
		this.id = id;
	}

	/**
	 * Sets the name.
	 *
	 * @param name the new name
	 */
	public void setName(String name) {
		this.name = name;
	}

	/**
	 * Sets the sort.
	 *
	 * @param sort the new sort
	 */
	public void setSort(Integer sort) {
		this.sort = sort;
	}

	/**
	 * Sets the sup.
	 *
	 * @param sup the new sup
	 */
	public void setSup(Category sup) {
		this.sup = sup;
	}

	/* (non-Javadoc)
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return name;
	}
}
