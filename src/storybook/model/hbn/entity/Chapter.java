/*
Storybook: Open Source software for novelists and authors.
Copyright (C) 2008 - 2012 Martin Mustun

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package storybook.model.hbn.entity;

import java.sql.Timestamp;

import storybook.toolkit.I18N;
import storybook.toolkit.TextUtil;

// TODO: Auto-generated Javadoc
/**
 * Chapter generated by hbm2java.
 *
 * @hibernate.class table="CHAPTER"
 */

public class Chapter extends AbstractEntity implements Comparable<Chapter> {

	/** The Constant serialVersionUID. */
	private static final long serialVersionUID = -7254626248869097378L;
	
	/** The part. */
	private Part part;
	
	/** The chapterno. */
	private Integer chapterno;
	
	/** The title. */
	private String title;
	
	/** The description. */
	private String description;
	
	/** The notes. */
	private String notes;
	
	/** The creation time. */
	private Timestamp creationTime;
	
	/** The objective time. */
	private Timestamp objectiveTime;
	
	/** The done time. */
	private Timestamp doneTime;
	
	/** The objective chars. */
	private Integer objectiveChars;

	/**
	 * Instantiates a new chapter.
	 */
	public Chapter() {
	}

	/**
	 * Instantiates a new chapter.
	 *
	 * @param part the part
	 * @param chapterno the chapterno
	 * @param title the title
	 * @param description the description
	 * @param notes the notes
	 * @param creationTime the creation time
	 * @param objectiveTime the objective time
	 * @param doneTime the done time
	 * @param objectiveChars the objective chars
	 */
	public Chapter(Part part, Integer chapterno, String title, String description, String notes, Timestamp creationTime,
			Timestamp objectiveTime, Timestamp doneTime, Integer objectiveChars) {
		this.part = part;
		this.chapterno = chapterno;
		this.title = title;
		this.description = description;
		this.notes = notes;
		this.creationTime = creationTime;
		this.objectiveTime = objectiveTime;
		this.doneTime = doneTime;
		this.objectiveChars = objectiveChars;
	}

	/* (non-Javadoc)
	 * @see java.lang.Comparable#compareTo(java.lang.Object)
	 */
	@Override
	public int compareTo(Chapter ch) {
		return chapterno.compareTo(ch.chapterno);
	}

	/* (non-Javadoc)
	 * @see storybook.model.hbn.entity.AbstractEntity#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (!super.equals(obj)) {
			return false;
		}
		Chapter test = (Chapter) obj;
		boolean ret = true;
		ret = ret && equalsObjectNullValue(part, test.getPart());
		ret = ret && equalsIntegerNullValue(chapterno, test.getChapterno());
		ret = ret && equalsStringNullValue(title, test.getTitle());
		ret = ret && equalsStringNullValue(description, test.getDescription());
		ret = ret && equalsStringNullValue(notes, test.getNotes());
		return ret;
	}

	/**
	 * Gets the chapterno.
	 *
	 * @return the chapterno
	 * @hibernate.property 
	 */
	public Integer getChapterno() {
		return this.chapterno == null ? -1 : this.chapterno;
	}

	/**
	 * Gets the chapterno str.
	 *
	 * @return the chapterno str
	 */
	public String getChapternoStr() {
		return getChapterno().toString();
	}

	/**
	 * Gets the creation time.
	 *
	 * @return the creation time
	 */
	public Timestamp getCreationTime() {
		return creationTime;
	}

	/**
	 * Gets the description.
	 *
	 * @return the description
	 * @hibernate.property 
	 */
	public String getDescription() {
		return description;
	}

	/**
	 * Gets the done time.
	 *
	 * @return the done time
	 */
	public Timestamp getDoneTime() {
		return doneTime;
	}

	/**
	 * Gets the id.
	 *
	 * @return the id
	 * @hibernate.id column="ID" generator-class="increment"
	 *               unsaved-value="null"
	 */
	@Override
	public Long getId() {
		return this.id;
	}

	/**
	 * Gets the notes.
	 *
	 * @return the notes
	 * @hibernate.property 
	 */
	public String getNotes() {
		if (notes == null) {
			return "";
		}
		return this.notes;
	}

	/**
	 * Gets the objective chars.
	 *
	 * @return the objective chars
	 * @hibernate.property 
	 */
	public Integer getObjectiveChars() {
		return (this.objectiveChars == null) ? 0 : this.objectiveChars;
	}

	/**
	 * Gets the objective time.
	 *
	 * @return the objective time
	 */
	public Timestamp getObjectiveTime() {
		return objectiveTime;
	}

	/**
	 * Gets the part.
	 *
	 * @return the part
	 * @hibernate.many-to-one column="part_id" cascade="none"
	 */
	public Part getPart() {
		return part;
	}

	/**
	 * Gets the title.
	 *
	 * @return the title
	 * @hibernate.property 
	 */
	public String getTitle() {
		return this.title == null ? "" : this.title;
	}

	/**
	 * Gets the title.
	 *
	 * @param truncate the truncate
	 * @return the title
	 */
	public String getTitle(boolean truncate) {
		return title == null ? "" : TextUtil.truncateString(title, 30);
	}

	/**
	 * Checks for creation time.
	 *
	 * @return true, if successful
	 * @hibernate.property 
	 */
	public boolean hasCreationTime() {
		return creationTime != null;
	}

	/**
	 * Checks for done time.
	 *
	 * @return true, if successful
	 */
	public boolean hasDoneTime() {
		return doneTime != null;
	}

	/* (non-Javadoc)
	 * @see storybook.model.hbn.entity.AbstractEntity#hashCode()
	 */
	@Override
	public int hashCode() {
		int hash = super.hashCode();
		hash = hash * 31 + part.hashCode();
		hash = hash * 31 + chapterno.hashCode();
		hash = hash * 31 + title.hashCode();
		hash = hash * 31 + description.hashCode();
		hash = hash * 31 + notes.hashCode();
		return hash;
	}

	/**
	 * Checks for objective time.
	 *
	 * @return true, if successful
	 * @hibernate.property 
	 */
	public boolean hasObjectiveTime() {
		return objectiveTime != null;
	}

	/**
	 * Checks for part.
	 *
	 * @return true, if successful
	 */
	public boolean hasPart() {
		return part != null;
	}

	/**
	 * Checks if is done.
	 *
	 * @return true, if is done
	 * @hibernate.property 
	 */
	public boolean isDone() {
		return hasDoneTime();
	}

	/**
	 * Sets the chapterno.
	 *
	 * @param chapterno the new chapterno
	 */
	public void setChapterno(Integer chapterno) {
		this.chapterno = chapterno;
	}

	/**
	 * Sets the creation time.
	 *
	 * @param ts the new creation time
	 */
	public void setCreationTime(Timestamp ts) {
		creationTime = ts;
	}

	/**
	 * Sets the description.
	 *
	 * @param description the new description
	 */
	public void setDescription(String description) {
		this.description = description;
	}

	/**
	 * Sets the done time.
	 *
	 * @param ts the new done time
	 */
	public void setDoneTime(Timestamp ts) {
		doneTime = ts;
	}

	/**
	 * Sets the id.
	 *
	 * @param id the new id
	 */
	public void setId(Long id) {
		this.id = id;
	}

	/**
	 * Sets the notes.
	 *
	 * @param notes the new notes
	 */
	public void setNotes(String notes) {
		this.notes = notes;
	}

	/**
	 * Sets the objective chars.
	 *
	 * @param objectiveChars the new objective chars
	 */
	public void setObjectiveChars(Integer objectiveChars) {
		this.objectiveChars = objectiveChars;
	}

	/**
	 * Sets the objective time.
	 *
	 * @param ts the new objective time
	 */
	public void setObjectiveTime(Timestamp ts) {
		objectiveTime = ts;
	}

	/**
	 * Sets the part.
	 *
	 * @param part the new part
	 */
	public void setPart(Part part) {
		this.part = part;
	}

	/**
	 * Sets the title.
	 *
	 * @param title the new title
	 */
	public void setTitle(String title) {
		this.title = title;
	}

	/* (non-Javadoc)
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		if (chapterno == null) {
			return I18N.getMsg("msg.unassigned.scenes");
		}
		return getChapterno() + ": " + getTitle();
	}
}
