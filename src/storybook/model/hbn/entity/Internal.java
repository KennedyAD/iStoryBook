/*
Storybook: Open Source software for novelists and authors.
Copyright (C) 2008 - 2012 Martin Mustun

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package storybook.model.hbn.entity;

// TODO: Auto-generated Javadoc
/**
 * Internal generated by hbm2java.
 *
 * @hibernate.class table="INTERNAL"
 */
public class Internal extends AbstractEntity {

	/** The Constant serialVersionUID. */
	private static final long serialVersionUID = -2344813523263610042L;
	
	/** The key. */
	private String key;
	
	/** The string value. */
	private String stringValue;
	
	/** The integer value. */
	private Integer integerValue;
	
	/** The boolean value. */
	private Boolean booleanValue;
	
	/** The bin value. */
	private byte[] binValue;

	/**
	 * Instantiates a new internal.
	 */
	public Internal() {
	}

	/**
	 * Instantiates a new internal.
	 *
	 * @param key the key
	 */
	public Internal(String key) {
		this.key = key;
	}

	/**
	 * Instantiates a new internal.
	 *
	 * @param key the key
	 * @param booleanValue the boolean value
	 */
	public Internal(String key, Boolean booleanValue) {
		this.key = key;
		this.booleanValue = booleanValue;
	}

	/**
	 * Instantiates a new internal.
	 *
	 * @param key the key
	 * @param binValue the bin value
	 */
	public Internal(String key, byte[] binValue) {
		this.key = key;
		this.binValue = binValue;
	}

	/**
	 * Instantiates a new internal.
	 *
	 * @param key the key
	 * @param integerValue the integer value
	 */
	public Internal(String key, Integer integerValue) {
		this.key = key;
		this.integerValue = integerValue;
	}

	/**
	 * Instantiates a new internal.
	 *
	 * @param key the key
	 * @param value the value
	 */
	public Internal(String key, Object value) {
		this.key = key;
		if (value instanceof String) {
			this.stringValue = (String) value;
		} else if (value instanceof Integer) {
			this.integerValue = (Integer) value;
		} else if (value instanceof Boolean) {
			this.booleanValue = (Boolean) value;
		} else if (value instanceof byte[]) {
			// ignore
		} else {
			System.err.println("Internal.Internal(): Unknown Type");
		}
	}

	/**
	 * Instantiates a new internal.
	 *
	 * @param key the key
	 * @param stringValue the string value
	 */
	public Internal(String key, String stringValue) {
		this.key = key;
		this.stringValue = stringValue;
	}

	/* (non-Javadoc)
	 * @see storybook.model.hbn.entity.AbstractEntity#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (!super.equals(obj)) {
			return false;
		}
		Internal test = (Internal) obj;
		boolean ret = true;
		ret = ret && equalsStringNullValue(stringValue, test.getStringValue());
		ret = ret && equalsIntegerNullValue(integerValue, test.getIntegerValue());
		ret = ret && equalsBooleanNullValue(booleanValue, test.getBooleanValue());
		if (binValue != null) {
			ret = ret && binValue.equals(test.binValue);
		}
		return ret;
	}

	/**
	 * Gets the bin value.
	 *
	 * @return the bin value
	 * @hibernate.property type="binary" length="16384"
	 */
	public byte[] getBinValue() {
		return binValue;
	}

	/**
	 * Gets the boolean value.
	 *
	 * @return the boolean value
	 * @hibernate.property column="boolean_value"
	 */
	public Boolean getBooleanValue() {
		return this.booleanValue;
	}

	/**
	 * Gets the id.
	 *
	 * @return the id
	 * @hibernate.id column="ID" generator-class="increment"
	 *               unsaved-value="null"
	 */
	@Override
	public Long getId() {
		return this.id;
	}

	/**
	 * Gets the integer value.
	 *
	 * @return the integer value
	 * @hibernate.property column="integer_value"
	 */
	public Integer getIntegerValue() {
		return this.integerValue;
	}

	/**
	 * Gets the key.
	 *
	 * @return the key
	 * @hibernate.property 
	 */
	public String getKey() {
		return this.key;
	}

	/**
	 * Gets the string value.
	 *
	 * @return the string value
	 * @hibernate.property column="string_value"
	 */
	public String getStringValue() {
		return this.stringValue;
	}

	/**
	 * Checks for bin value.
	 *
	 * @return true, if successful
	 */
	public boolean hasBinValue() {
		return binValue != null;
	}

	/**
	 * Checks for boolean value.
	 *
	 * @return true, if successful
	 */
	public boolean hasBooleanValue() {
		return booleanValue != null;
	}

	/* (non-Javadoc)
	 * @see storybook.model.hbn.entity.AbstractEntity#hashCode()
	 */
	@Override
	public int hashCode() {
		int hash = super.hashCode();
		hash = hash * 31 + (stringValue != null ? stringValue.hashCode() : 0);
		hash = hash * 31 + (integerValue != null ? integerValue.hashCode() : 0);
		hash = hash * 31 + (booleanValue != null ? booleanValue.hashCode() : 0);
		hash = hash * 31 + (binValue != null ? binValue.hashCode() : 0);
		return hash;
	}

	/**
	 * Checks for integer value.
	 *
	 * @return true, if successful
	 */
	public boolean hasIntegerValue() {
		return integerValue != null;
	}

	/**
	 * Checks for string value.
	 *
	 * @return true, if successful
	 */
	public boolean hasStringValue() {
		return stringValue != null && stringValue.length() > 0;
	}

	/**
	 * Sets the bin value.
	 *
	 * @param binValue the new bin value
	 */
	public void setBinValue(byte[] binValue) {
		this.binValue = binValue;
	}

	/**
	 * Sets the boolean value.
	 *
	 * @param booleanValue the new boolean value
	 */
	public void setBooleanValue(Boolean booleanValue) {
		this.booleanValue = booleanValue;
	}

	/**
	 * Sets the id.
	 *
	 * @param id the new id
	 */
	public void setId(Long id) {
		this.id = id;
	}

	/**
	 * Sets the integer value.
	 *
	 * @param integerValue the new integer value
	 */
	public void setIntegerValue(Integer integerValue) {
		this.integerValue = integerValue;
	}

	/**
	 * Sets the key.
	 *
	 * @param key the new key
	 */
	public void setKey(String key) {
		this.key = key;
	}

	/**
	 * Sets the string value.
	 *
	 * @param stringValue the new string value
	 */
	public void setStringValue(String stringValue) {
		this.stringValue = stringValue;
	}

	/* (non-Javadoc)
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		StringBuffer buf = new StringBuffer();
		buf.append(key);
		buf.append(": ");
		if (hasStringValue()) {
			buf.append("string: '" + stringValue + "' ");
		} else {
			if (hasIntegerValue()) {
				buf.append("int: " + integerValue + " ");
			}
			if (hasBooleanValue()) {
				buf.append("boolean: " + booleanValue + " ");
			}
			if (hasBinValue()) {
				buf.append("'bin: [binary]");
			}
		}
		return buf.toString();
	}
}
