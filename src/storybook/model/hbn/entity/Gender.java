/*
Storybook: Open Source software for novelists and authors.
Copyright (C) 2008 - 2012 Martin Mustun

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package storybook.model.hbn.entity;

import javax.swing.Icon;

import storybook.toolkit.I18N;

// TODO: Auto-generated Javadoc
/**
 * Gender generated by hbm2java.
 *
 * @hibernate.class table="GENDER"
 */
public class Gender extends AbstractEntity {

	/** The Constant serialVersionUID. */
	private static final long serialVersionUID = 8166861330609955291L;
	
	/** The name. */
	private String name;
	
	/** The childhood. */
	private Integer childhood;
	
	/** The adolescence. */
	private Integer adolescence;
	
	/** The adulthood. */
	private Integer adulthood;
	
	/** The retirement. */
	private Integer retirement;

	/**
	 * Instantiates a new gender.
	 */
	public Gender() {
		childhood = 12;
		adolescence = 6;
		adulthood = 47;
		retirement = 14;
	}

	/**
	 * Instantiates a new gender.
	 *
	 * @param name the name
	 * @param childhood the childhood
	 * @param adolescence the adolescence
	 * @param adulthood the adulthood
	 * @param retirement the retirement
	 */
	public Gender(String name, Integer childhood, Integer adolescence, Integer adulthood, Integer retirement) {
		this.name = name;
		this.childhood = childhood;
		this.adolescence = adolescence;
		this.adulthood = adulthood;
		this.retirement = retirement;
	}

	/* (non-Javadoc)
	 * @see storybook.model.hbn.entity.AbstractEntity#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (!super.equals(obj)) {
			return false;
		}
		Gender test = (Gender) obj;
		boolean ret = true;
		ret = ret && equalsStringNullValue(name, test.getName());
		ret = ret && equalsIntegerNullValue(childhood, test.getChildhood());
		ret = ret && equalsIntegerNullValue(adolescence, test.getAdolescence());
		ret = ret && equalsIntegerNullValue(adulthood, test.getAdulthood());
		ret = ret && equalsIntegerNullValue(retirement, test.getRetirement());
		return ret;
	}

	/**
	 * Gets the adolescence.
	 *
	 * @return the adolescence
	 * @hibernate.property not-null="true"
	 */
	public Integer getAdolescence() {
		return this.adolescence;
	}

	/**
	 * Gets the adulthood.
	 *
	 * @return the adulthood
	 * @hibernate.property not-null="true"
	 */
	public Integer getAdulthood() {
		return this.adulthood;
	}

	/**
	 * Gets the childhood.
	 *
	 * @return the childhood
	 * @hibernate.property not-null="true"
	 */
	public Integer getChildhood() {
		return this.childhood;
	}

	/* (non-Javadoc)
	 * @see storybook.model.hbn.entity.AbstractEntity#getIcon()
	 */
	@Override
	public Icon getIcon() {
		if (isMale()) {
			return I18N.getIcon("icon.small.man");
		}
		if (isFemale()) {
			return I18N.getIcon("icon.small.woman");
		}
		return I18N.getIcon("icon.small.person");
	}

	/**
	 * Gets the id.
	 *
	 * @return the id
	 * @hibernate.id column="ID" generator-class="increment"
	 *               unsaved-value="null"
	 */
	@Override
	public Long getId() {
		return this.id;
	}

	/**
	 * Gets the name.
	 *
	 * @return the name
	 * @hibernate.property 
	 */
	public String getName() {
		return this.name;
	}

	/**
	 * Gets the retirement.
	 *
	 * @return the retirement
	 * @hibernate.property not-null="true"
	 */
	public Integer getRetirement() {
		return this.retirement;
	}

	/* (non-Javadoc)
	 * @see storybook.model.hbn.entity.AbstractEntity#hashCode()
	 */
	@Override
	public int hashCode() {
		int hash = super.hashCode();
		hash = hash * 31 + (name != null ? name.hashCode() : 0);
		hash = hash * 31 + (childhood != null ? childhood.hashCode() : 0);
		hash = hash * 31 + (adolescence != null ? adolescence.hashCode() : 0);
		hash = hash * 31 + (adulthood != null ? adulthood.hashCode() : 0);
		hash = hash * 31 + (retirement != null ? retirement.hashCode() : 0);
		return hash;
	}

	/**
	 * Checks if is female.
	 *
	 * @return true, if is female
	 */
	public boolean isFemale() {
		return id == 2;
	}

	/**
	 * Checks if is male.
	 *
	 * @return true, if is male
	 */
	public boolean isMale() {
		return id == 1;
	}

	/**
	 * Sets the adolescence.
	 *
	 * @param adolescence the new adolescence
	 */
	public void setAdolescence(Integer adolescence) {
		this.adolescence = adolescence;
	}

	/**
	 * Sets the adulthood.
	 *
	 * @param adulthood the new adulthood
	 */
	public void setAdulthood(Integer adulthood) {
		this.adulthood = adulthood;
	}

	/**
	 * Sets the childhood.
	 *
	 * @param childhood the new childhood
	 */
	public void setChildhood(Integer childhood) {
		this.childhood = childhood;
	}

	/**
	 * Sets the icon.
	 *
	 * @param icon the new icon
	 */
	public void setIcon(Icon icon) {
		// ulterieur Gender.setIcon
	}

	/**
	 * Sets the id.
	 *
	 * @param id the new id
	 */
	public void setId(Long id) {
		this.id = id;
	}

	/**
	 * Sets the name.
	 *
	 * @param name the new name
	 */
	public void setName(String name) {
		this.name = name;
	}

	/**
	 * Sets the retirement.
	 *
	 * @param retirement the new retirement
	 */
	public void setRetirement(Integer retirement) {
		this.retirement = retirement;
	}

	/* (non-Javadoc)
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return getName();
	}
}
